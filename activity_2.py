# -*- coding: utf-8 -*-
"""activity_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gWi8BFzejYSMDTVUmqulKQS7MUBx8JdH
"""

import pandas as pd

#mount with drive
from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv('/content/drive/MyDrive/ColabNotebooks/_cafe_sales.csv')#(df(dataframe) is that format which undertood to pandas )
df

df.info()

"""# **Missing Values Handle**"""

missing_values=df.isnull().sum()
print("Missing Values", missing_values)

missing_value_percentage= (missing_values/len(df))  * 100
print("Missing values in percentage",missing_value_percentage )

################################################Item###########################################


#item is a categorical data-----nominal ----replace missing values with "unknown"
df['Item'] = df['Item'].fillna('Unknown')

################################################Quantity###########################################

# df['Quantity'].value_counts()

#quantity have some inconistencies values firslty convert to Nan
df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce')

#check histogram
import matplotlib.pyplot as plt
plt.hist(df['Quantity'])
plt.show()

# its normal distribution ---mode
df['Quantity'].fillna(df['Quantity'].mode()[0], inplace=True)

################################################Price Per Unit###########################################
# df['Price Per Unit'].value_counts()


#Price Per Unit have some inconistencies values firslty convert to Nan
df['Price Per Unit'] = pd.to_numeric(df['Price Per Unit'], errors='coerce')

#check histogram
import matplotlib.pyplot as plt
plt.hist(df['Price Per Unit'])
plt.show()

# its partially skewed distribution ---median
df['Price Per Unit'].fillna(df['Price Per Unit'].median(), inplace=True)

################################################Total Spent###########################################

# df['Total Spent'].value_counts()

#Price Per Unit have some inconistencies values firslty convert to Nan
df['Total Spent'] = pd.to_numeric(df['Total Spent'], errors='coerce')

import matplotlib.pyplot as plt
plt.hist(df['Total Spent'])
plt.show()

# its partially skewed distribution ---median
df['Total Spent'].fillna(df['Total Spent'].median(), inplace=True)

################################################Payment Method###########################################
df['Payment Method'].value_counts()

#data inconsistences "ERROR replace with mode value "digital wallet"
# df['Payment Method'] = df['Payment Method'].replace('Unknown', 'UNKNOWN')

#Payment Method is a categorical data-----nominal ----replace missing values with "unknown"
df['Payment Method'] = df['Payment Method'].fillna('UNKNOWN')

################################################    Location   ###########################################
df['Location'].value_counts()

#data inconsistences "ERROR replace with mode value "digital wallet"
df['Location'] = df['Location'].replace('ERROR', 'Takeaway')

#Location is a categorical data-----nominal ----replace missing values with "unknown"
df['Location'] = df['Location'].fillna('Unknown')

################################################    Transaction Date   ###########################################
df['Transaction Date'].value_counts()

#for data inconsistencies
df['Transaction Date'] = pd.to_datetime(df['Transaction Date'], errors='coerce')

placeholder = df['Transaction Date'].min()
df['Transaction Date'].fillna(placeholder, inplace=True)

"""# **Outliers Detections**"""

#################################################  Items ########################################################################
import matplotlib.pyplot as plt
import seaborn as sns

sns.boxplot(y=df['Item'])  #y means vertical orientation
plt.title('Box plot of Item')
plt.show

#no outliers present

#################################################  Quantity ########################################################################
sns.boxplot(y=df['Quantity'])
plt.title('Box plot of Quantity')
plt.show

#no outlier in quantity

#################################################  Price Per Unit ###############################################################
sns.boxplot(y=df['Price Per Unit'])
plt.title('Box plot of Price Per Unit')
plt.show

#no outlier

#################################################  Total Spent ###############################################################
sns.boxplot(y=df['Total Spent'])
plt.title('Box plot of Total Spent')
plt.show

Q1 = df['Total Spent'].quantile(0.25)
Q3 = df['Total Spent'].quantile(0.75)
IQR = Q3 - Q1

# Define outlier threshold
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Find outliers
outliers = df[(df['Total Spent'] < lower_bound) | (df['Total Spent'] > upper_bound)]
print(outliers)

df['Total Spent'] = df['Total Spent'].clip(upper=upper_bound)

sns.boxplot(y=df['Total Spent'])
plt.title('Box plot of Total Spent')
plt.show

"""# **Data Visualization**"""

#  Transaction Date is datetime
df['Transaction Date'] = pd.to_datetime(df['Transaction Date'], errors='coerce')

# Group by date and sum Total Spent
daily_sales = df.groupby('Transaction Date')['Total Spent'].sum().reset_index()

# Plot
plt.figure(figsize=(12, 6))
sns.lineplot(data=daily_sales, x='Transaction Date', y='Total Spent')
plt.title('Daily Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Count purchases by payment method
payment_counts = df['Payment Method'].value_counts()

# Pie chart
plt.figure(figsize=(6, 6))
plt.pie(payment_counts, labels=payment_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Purchase Distribution by Payment Method')
plt.tight_layout()
plt.show()

# Ensure datetime format
df['Transaction Date'] = pd.to_datetime(df['Transaction Date'], errors='coerce')

# Extract hour and weekday
df['Hour'] = df['Transaction Date'].dt.hour
df['DayOfWeek'] = df['Transaction Date'].dt.day_name()

# Group and pivot table
heatmap_data = df.groupby(['DayOfWeek', 'Hour'])['Total Spent'].sum().unstack()

# Reorder days
days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
heatmap_data = heatmap_data.reindex(days_order)

# Plot heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(heatmap_data, cmap='YlGnBu', annot=True, fmt='.0f')
plt.title('Heatmap of Sales by Day and Hour')
plt.xlabel('Hour of Day')
plt.ylabel('Day of Week')
plt.tight_layout()
plt.show()

"""# **Feature Engineering**"""

#create total sale feature
df['Total Sale'] = df['Quantity'] * df['Price Per Unit']

df['Transaction Date'] = pd.to_datetime(df['Transaction Date'], errors='coerce')

# Extract day of week and hour
df['Day of Week'] = df['Transaction Date'].dt.day_name()
df['Hour'] = df['Transaction Date'].dt.hour

categorical_cols = ['Item', 'Payment Method', 'Location', 'Day of Week']
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

df_encoded.head()